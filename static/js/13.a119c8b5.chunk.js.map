{"version":3,"sources":["Pages/AdminEditProduct.module.css","Pages/AdminEditProduct.js"],"names":["module","exports","AdminEditProduct","props","componentDidMount","getProductFromServer","location","pathname","split","console","log","componentDidUpdate","newProps","nextState","product","name","price","brand","colour","category","size","subcategory","description","sizes","length","images","setState","chosenSubCat","small","medium","large","handleSubmit","e","preventDefault","errors","user","readyToSubmit","state","prevState","Number","isInteger","parseInt","data","stock","admin","email","token","productId","_id","updateProduct","reset","closeModal","viewProduct","history","push","createdProductId","removeImage","index","deleteImage","id","updateCat","target","value","subCats","Object","keys","categories","allSubCats","forEach","cat","subsubcat","updateSubCat","handleChange","files","form","FormData","append","uploadImage","formData","imagesToDisplay","imagesArrayForMulter","showModal","initialState","this","productCreated","options","map","unshift","selected","className","styles","editproductcontainer","productmodal","style","textAlign","class","productbtn","onClick","continueshoppingbtn","gobackbtn","color","to","editformcontainer","onSubmit","encType","placeholder","onChange","type","for","uploadbtn","display","accept","multiple","imagecontainer","image","imagebtn","imagehover","height","width","padding","src","alt","sizecontainer","smallcontainer","sizeinput","dropdown","disabled","submitbtn","error","Component","withRouter","connect","products","selectedProduct","productCreatedModal","latestCreatedProductId","dispatch","createNewProduct","createProduct","closeProductCreatedModal","getProduct","updateProductOnServer","deleteImageFromServer","uploadImageToServer"],"mappings":"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","file":"static/js/13.a119c8b5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"editproductcontainer\":\"AdminEditProduct_editproductcontainer__-7HGn\",\"productmodal\":\"AdminEditProduct_productmodal__1_gN0\",\"product\":\"AdminEditProduct_product__1Xq2H\",\"productbtn\":\"AdminEditProduct_productbtn__2owQS\",\"sizeinput\":\"AdminEditProduct_sizeinput__MsJWt\",\"smallcontainer\":\"AdminEditProduct_smallcontainer__2CSn-\",\"sizecontainer\":\"AdminEditProduct_sizecontainer__2oFZw\",\"submitbtn\":\"AdminEditProduct_submitbtn__1qqvg\",\"uploadbtn\":\"AdminEditProduct_uploadbtn__2HCNA\",\"editformcontainer\":\"AdminEditProduct_editformcontainer___iEOK\",\"gobackbtn\":\"AdminEditProduct_gobackbtn__1XhHE\",\"dropdown\":\"AdminEditProduct_dropdown__-Rqya\",\"imagecontainer\":\"AdminEditProduct_imagecontainer__1Zpxi\",\"imagebtn\":\"AdminEditProduct_imagebtn__1uc10\",\"imagehover\":\"AdminEditProduct_imagehover__2766O\",\"error\":\"AdminEditProduct_error__1bF4x\"};","/* NPM packages */\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\n/* CSS */\n\nimport styles from './AdminEditProduct.module.css';\n\n/* Action creators */\n\nimport {\n  createProduct,\n  closeProductCreatedModal,\n  getProduct,\n  updateProductOnServer,\n  deleteImageFromServer,\n  uploadImageToServer,\n} from '../Actions/products.js';\n\nclass AdminEditProduct extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      price: 0,\n      imagesToDisplay: [],\n      imagesArrayForMulter: [],\n      brand: '',\n      small: 0,\n      medium: 0,\n      large: 0,\n      size: null,\n      category: '',\n      subcategory: [],\n      chosenSubCat: '',\n      description: '',\n      errors: [],\n      colour: '',\n      showModal: false,\n    };\n\n    // Set the default state immediately, I will use this to reset state and clear it once the form is completed\n    this.initialState = this.state;\n  }\n\n  componentDidMount = () => {\n    let { getProductFromServer } = this.props;\n    let id = this.props.location.pathname.split('/')[3];\n    getProductFromServer(id);\n    console.log(this.props);\n  };\n\n  // I use component did update to get the props from the redux store to prepopulate\n  // form by updating state. I do this by mkaing sure the props have changed ( except the\n  // images which are deleted and added to the server separately )\n\n  componentDidUpdate = (newProps, nextState) => {\n    let {\n      name,\n      price,\n      brand,\n      colour,\n      category,\n      size,\n      subcategory,\n      description,\n    } = this.props.product;\n\n    let sizes = newProps.product.length !== 0 && newProps.product.size[0];\n    if (this.props.images === newProps.images) {\n      if (this.props.product !== newProps.product) {\n        this.setState({\n          name: name,\n          price: price,\n          brand: brand,\n          colour: colour,\n          chosenSubCat: subcategory,\n          size: size,\n          small: sizes.small,\n          medium: sizes.medium,\n          large: sizes.large,\n          category: category,\n          subcategory: [subcategory],\n          description: description,\n        });\n      }\n    }\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState({ errors: [] });\n    let { user } = this.props;\n    this.setState({ errors: [] });\n    let readyToSubmit = true;\n\n    if (this.state.name === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for name'],\n      }));\n      readyToSubmit = false;\n    }\n    if (\n      this.state.small === '' ||\n      !Number.isInteger(parseInt(this.state.small))\n    ) {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for small'],\n      }));\n      readyToSubmit = false;\n    }\n    if (\n      this.state.medium === '' ||\n      !Number.isInteger(parseInt(this.state.medium))\n    ) {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for medium'],\n      }));\n      readyToSubmit = false;\n    }\n    if (\n      this.state.large === '' ||\n      !Number.isInteger(parseInt(this.state.large))\n    ) {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for large'],\n      }));\n      readyToSubmit = false;\n    }\n    if (this.state.colour === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for colour'],\n      }));\n      readyToSubmit = false;\n    }\n    if (\n      this.state.price === 0 ||\n      !Number.isInteger(parseInt(this.state.price))\n    ) {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for price'],\n      }));\n      readyToSubmit = false;\n    }\n\n    if (this.props.product.images.length === 0) {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide at least one image'],\n      }));\n      readyToSubmit = false;\n    }\n\n    if (this.state.brand === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for brand'],\n      }));\n      readyToSubmit = false;\n    }\n\n    if (this.state.category === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for category'],\n      }));\n      readyToSubmit = false;\n    }\n\n    if (this.state.description === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for description'],\n      }));\n      readyToSubmit = false;\n    }\n    if (this.state.chosenSubCat === '') {\n      this.setState((prevState) => ({\n        errors: [...prevState.errors, 'Please provide a value for subcategory'],\n      }));\n    }\n    if (readyToSubmit) {\n      //The images have already been deleted or uploaded to the server on this route, therefore\n      //i can send the data as json rather than formData\n\n      // Note you have to append each key/value pair individually\n      let productUpdateInfo = {\n        name: this.state.name,\n        price: this.state.price,\n        brand: this.state.brand,\n        colour: this.state.colour,\n        stock: {\n          small: this.state.small,\n          medium: this.state.medium,\n          large: this.state.large,\n        },\n        category: this.state.subcategory,\n        chosenSubCat: this.state.chosenSubCat,\n        description: this.state.description,\n      };\n\n      let data = {\n        data: productUpdateInfo,\n        admin: { email: user.email, token: user.token },\n        productId: this.props.product._id,\n      };\n\n      this.props.updateProduct(data);\n    }\n  };\n\n  reset = () => {\n    this.props.closeModal();\n  };\n  viewProduct = () => {\n    this.props.history.push(`/product/${this.props.createdProductId}`);\n    this.props.closeModal();\n  };\n\n  removeImage = (index) => {\n    let { email, token } = this.props.user;\n    // Below the images are removed from the actual image files being sent to express and multer, the other is\n    // the image files being displayed as previews on the page ( using the filereader API)\n    this.props.deleteImage({\n      index: index,\n      id: this.props.product._id,\n      admin: { email: email, token: token },\n    });\n    // let imagesToSendToMulter = [...this.state.imagesArrayForMulter];\n    // imagesToDisplay.splice(index, 1);\n    // imagesToSendToMulter.splice(index, 1);\n    // this.setState({\n    //   imagesToDisplay: imagesToDisplay,\n    //   imagesArrayForMulter: imagesToSendToMulter,\n    // });\n  };\n\n  updateCat = (e) => {\n    if (e.target.value !== 'blank') {\n      let subCats = Object.keys(this.props.categories[e.target.value]);\n      let allSubCats = [];\n      subCats.forEach((cat) => [\n        this.props.categories[e.target.value][cat].forEach((subsubcat) => {\n          return allSubCats.push(subsubcat);\n        }),\n      ]);\n      console.log(allSubCats);\n      this.setState({ category: e.target.value, subcategory: allSubCats });\n    }\n  };\n\n  updateSubCat = (e) => {\n    this.setState({ chosenSubCat: e.target.value });\n  };\n\n  handleChange = (e) => {\n    console.log(e.target.value, e.target.name);\n    // This first if statement checks if I am dealing with an image upload, if so then it firstly adds the actual image file to\n    // to array in state which I can then send to the back end, this is added to the formData in the submit function, the second part uses the file reader\n    // to produce images which can be actually viewed as a preview on the page, both are stored in different arrays in state as they contain different files\n    if (e.target.files) {\n      let { email, token } = this.props.user;\n      // Below the images are removed from the actual image files being sent to express and multer, the other is\n      // the image files being displayed as previews on the page ( using the filereader API)\n      let form = new FormData();\n      form.append('image', e.target.files[0]);\n\n      this.props.uploadImage({\n        formData: form,\n        id: this.props.product._id,\n        admin: { email: email, token: token },\n      });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  render() {\n    let { categories } = this.props;\n    let { productCreated, product } = this.props;\n    let small = this.state.size ? this.state.size[0].small : null;\n    let options = Object.keys(categories).map((category) => (\n      <option name='category' value={category}>\n        {category}\n      </option>\n    ));\n    options.unshift(\n      <option selected value='blank'>\n        -- select an option --{' '}\n      </option>\n    );\n\n    console.log(product.length !== 0 && product.images);\n\n    return (\n      <>\n        <div className={styles.editproductcontainer}>\n          {productCreated && (\n            <div className={styles.productmodal}>\n              <div className={styles.product}>\n                <h2 style={{ textAlign: 'center' }}>\n                  {' '}\n                  <i className='fas fa-check'></i>\n                  &nbsp;Product created! Would you like to{' '}\n                </h2>\n                <button\n                  class={styles.productbtn}\n                  onClick={() => this.viewProduct()}\n                  className={styles.continueshoppingbtn}>\n                  View the product in our store\n                </button>\n                <button\n                  class={styles.productbtn}\n                  onClick={() => this.reset()}\n                  className={styles.continueshoppingbtn}>\n                  Create another product\n                </button>\n              </div>\n            </div>\n          )}\n          <h4>\n            <button class={styles.gobackbtn}>\n              <Link style={{ color: '#ecf0f1' }} to='/admin'>\n                Go back\n              </Link>{' '}\n            </button>\n          </h4>\n          <h2>\n            EDIT PRODUCT-please just fill in the fields you would like to change\n          </h2>\n          <div className={styles.editformcontainer}>\n            <form onSubmit={this.handleSubmit} encType='multipart/form-data'>\n              <label>\n                Name:\n                <input\n                  placeholder={product && product.name}\n                  name='name'\n                  value={this.state.name}\n                  onChange={(e) => this.handleChange(e)}\n                />\n              </label>\n              <label>\n                Price\n                <input\n                  type='text'\n                  name='price'\n                  value={this.state.price}\n                  onChange={(e) => this.handleChange(e)}\n                />\n              </label>\n              Please upload the images below\n              <label for='uploadbtn' class={styles.uploadbtn}>\n                {' '}\n                Upload Images\n              </label>\n              <input\n                style={{ display: 'none' }}\n                onChange={(e) => this.handleChange(e)}\n                id='uploadbtn'\n                type='file'\n                accept='.jpg, .png,.jpeg'\n                multiple=''\n              />\n              <div class={styles.imagecontainer}>\n                {product.length !== 0 &&\n                  product.images.map((image, index) => (\n                    <div\n                      onClick={() => this.removeImage(index)}\n                      className={styles.imagebtn}>\n                      <div class={styles.imagehover}>X</div>\n                      <img\n                        style={{\n                          height: '4rem',\n                          width: '6rem',\n                          padding: '0 0.5rem',\n                        }}\n                        src={`http://localhost:5000/${image}`}\n                        alt=''></img>\n                    </div>\n                  ))}\n              </div>\n              <label>\n                Brand\n                <input\n                  type='text'\n                  placeholder={this.props.product && this.props.product.brand}\n                  name='brand'\n                  value={this.state.brand}\n                  onChange={(e) => this.handleChange(e)}\n                />\n              </label>\n              <label>\n                Colour\n                <input\n                  type='text'\n                  name='colour'\n                  value={this.state.colour}\n                  onChange={(e) => this.handleChange(e)}\n                />\n              </label>\n              <label>\n                Stock :\n                {this.state.small !== '' &&\n                this.state.medium !== '' &&\n                this.state.large !== ''\n                  ? parseInt(this.state.small) +\n                    parseInt(this.state.medium) +\n                    parseInt(this.state.large)\n                  : null}\n                <br />\n                Please enter amounts in each size below\n                <div class={styles.sizecontainer}>\n                  <div class={styles.smallcontainer}>\n                    <span> Small </span>\n                    <input\n                      class={styles.sizeinput}\n                      type='text'\n                      name='small'\n                      value={this.state.small}\n                      onChange={(e) => this.handleChange(e)}\n                    />\n                    <span> Medium</span>\n                    <input\n                      class={styles.sizeinput}\n                      type='text'\n                      name='medium'\n                      value={this.state.medium}\n                      onChange={(e) => this.handleChange(e)}\n                    />\n                    <span> Large </span>\n                    <input\n                      class={styles.sizeinput}\n                      type='text'\n                      name='large'\n                      value={this.state.large}\n                      onChange={(e) => this.handleChange(e)}\n                    />\n                  </div>\n                </div>\n              </label>\n              <label>\n                Category\n                <br />\n                <select\n                  class={styles.dropdown}\n                  value={this.state.category}\n                  onChange={(e) => this.updateCat(e)}>\n                  {options}\n                </select>\n              </label>\n              <label>\n                Subcategory\n                <br />\n                <select\n                  class={styles.dropdown}\n                  disabled={this.state.subcategory.length === 1}\n                  value={this.state.chosenSubCat}\n                  onChange={(e) => this.updateSubCat(e)}>\n                  <option value='blank'>-- select an option -- </option>\n                  {this.state.subcategory.length &&\n                    this.state.subcategory.map((subcategory) => (\n                      <option name='subcategory' value={subcategory}>\n                        {subcategory}\n                      </option>\n                    ))}\n                </select>\n              </label>\n              <label>\n                Description\n                <textarea\n                  placeholder={\n                    this.props.product && this.props.product.description\n                  }\n                  class={styles.description}\n                  type='textarea'\n                  name='description'\n                  value={this.state.description}\n                  onChange={(e) => this.handleChange(e)}\n                />\n              </label>\n              <input class={styles.submitbtn} type='submit' value='Submit' />\n            </form>\n            {this.state.errors &&\n              this.state.errors.map((error) => (\n                <p className={styles.error}>{error}</p>\n              ))}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    categories: state.products.categories,\n    user: state.user.user,\n    product: state.products.selectedProduct,\n    productCreated: state.products.productCreatedModal,\n    createdProductId: state.products.latestCreatedProductId,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createNewProduct: (data) => dispatch(createProduct(data)),\n    closeModal: () => dispatch(closeProductCreatedModal()),\n    getProductFromServer: (id) => dispatch(getProduct(id)),\n    updateProduct: (data) => dispatch(updateProductOnServer(data)),\n    deleteImage: (data) => dispatch(deleteImageFromServer(data)),\n    uploadImage: (data) => {\n      dispatch(uploadImageToServer(data));\n    },\n  };\n};\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(AdminEditProduct)\n);\n"],"sourceRoot":""}